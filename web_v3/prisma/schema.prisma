// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  recipes       Recipe[]
  comments      Comment[]
  Rating        Rating[]
  createdAt     DateTime   @default(now())
  savedRecipes  Recipe[]   @relation(name: "UserSaved")
  Article       Article?   @relation(fields: [articleId], references: [id])
  articleId     Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  name           String
  cookTime       String?
  servingSize    String?
  sourceURL      String?
  caption        String
  numSaves       Int        @default(0)
  numViews       Int        @default(0)
  secret         Boolean    @default(false)
  author         User       @relation(fields: [authorId], references: [id])
  authorId       String
  ratings        Rating[]
  overallRating  Int        @default(0)
  tasteRating    Int        @default(0)
  qualityRating  Int        @default(0)
  comments       Comment[]
  categories     Category[]
  likedBy        User[]     @relation(name: "UserSaved")
  ingredientList String[]
  directions     String[]
}

model Article {
  id         Int        @id @default(autoincrement())
  title      String
  body       String
  comments   Comment[]
  categories Category[]
  createdAt  DateTime   @default(now())
  User       User[]
}

model Question {
  id         Int        @id @default(autoincrement())
  title      String
  body       String
  comments   Comment[]
  categories Category[]
  createdAt  DateTime   @default(now())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  recipes    Recipe[]
  Article    Article?  @relation(fields: [articleId], references: [id])
  articleId  Int?
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
}

model Comment {
  id         Int       @id @default(autoincrement())
  text       String
  Recipe     Recipe?   @relation(fields: [recipeId], references: [id], onDelete: Cascade) // A comment can have one post
  recipeId   Int?
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime  @default(now())
  Article    Article?  @relation(fields: [articleId], references: [id])
  articleId  Int?
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
}

model Rating {
  id        Int      @id @default(autoincrement())
  Recipe    Recipe?  @relation(fields: [recipeId], references: [id], onDelete: Cascade) // A comment can have one post
  recipeId  Int?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}
